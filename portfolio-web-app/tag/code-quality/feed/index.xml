<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Code quality - Devashree Shukla</title>
	<atom:link href="/tag/code-quality/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>My professional portfolio</description>
	<lastBuildDate>Sat, 23 Mar 2024 12:13:20 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>
	<item>
		<title>Emulating C++-like Parameter Packs in Swift</title>
		<link>/emulating-c-parameter-packs-with-variadic-parameters-and-generics-in-swift/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=emulating-c-parameter-packs-with-variadic-parameters-and-generics-in-swift</link>
					<comments>/emulating-c-parameter-packs-with-variadic-parameters-and-generics-in-swift/#respond</comments>
		
		<dc:creator><![CDATA[devashreeks]]></dc:creator>
		<pubDate>Sat, 23 Mar 2024 10:36:52 +0000</pubDate>
				<category><![CDATA[Technical Writings]]></category>
		<category><![CDATA[C++]]></category>
		<category><![CDATA[Code enhancemnet]]></category>
		<category><![CDATA[Code flexibility]]></category>
		<category><![CDATA[Code quality]]></category>
		<category><![CDATA[Generics]]></category>
		<category><![CDATA[parameter packs]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[Variadic parameters]]></category>
		<guid isPermaLink="false">/?p=390</guid>

					<description><![CDATA[<p>Parameter packs are a feature of C++ that allows functions and templates to accept an arbitrary number of arguments of any type. This feature is primarily used in template metaprogramming and is a part of C++&#8217;s template system, which isn&#8217;t directly mirrored in Swift as Swift has a different type system and language features. Basics...</p>
<p>The post <a href="/emulating-c-parameter-packs-with-variadic-parameters-and-generics-in-swift/">Emulating C++-like Parameter Packs in Swift</a> first appeared on <a href="/">Devashree Shukla</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Parameter packs are a feature of C++ that allows functions and templates to accept an arbitrary number of arguments of any type. This feature is primarily used in template metaprogramming and is a part of C++&#8217;s template system, which isn&#8217;t directly mirrored in Swift as Swift has a different type system and language features.</p>



<h2 class="wp-block-heading">Basics of Parameter Packs in C++</h2>



<p>In C++, parameter packs are used with template programming to create functions, classes, and structs that can operate with any number of parameters of any types. There are two kinds of parameter packs:</p>



<ol>
<li><strong>Type parameter packs:</strong> Represents zero or more type parameters.</li>



<li><strong>Non-type parameter packs:</strong> Represents zero or more non-type parameters.</li>
</ol>



<p>Parameter packs are used in conjunction with variadic templates, which can take an arbitrary number of template arguments.</p>



<h3 class="wp-block-heading">Example:</h3>



<p>Here&#8217;s a simple example of a variadic template function that uses parameter packs:</p>



<pre>
template< typename... Args >
void print(Args... args) {
    (std::cout << ... << args) << '\n';
}
</pre>



<div class="wp-block-group is-layout-constrained wp-block-group-is-layout-constrained"><div class="wp-block-group__inner-container"></div></div>



<p>In this example, <code>Args</code> is a type parameter pack and <code>args</code> is a function parameter pack. The function <code>print</code> can accept any number of arguments of any type. The print line uses a fold expression (introduced in C++17) to print all arguments.</p>



<h2 class="wp-block-heading">Differences in Swift</h2>



<p>Swift does not have a direct equivalent of C++'s parameter packs because it handles variadic parameters and generics differently. Swift's variadic parameters allow functions to accept zero or more values of a specified type, and its generics enable functions, methods, classes, enums, and structs to work with any type in a type-safe manner.</p>



<p>While you can achieve functionality that resembles the use of parameter packs through the use of generics and variadic parameters in Swift, it's done differently and with different syntax and language features. Swift's approach is more constrained and type-safe, reflecting its overall design philosophy.</p>



<p>Understanding parameter packs is important if you're working with C++ or dealing with interoperability between C++ and other languages. However, when working in Swift, you'll use variadic parameters and generics to achieve similar flexible and reusable code structures.</p>



<h2 class="wp-block-heading">Enabling equivalent behavior in Swift</h2>



<p>Swift, unlike some other languages like C++, does not have a feature directly called "parameter packs". However, Swift has variadic parameters and generics, which can sometimes serve similar purposes. Let's break down these concepts, giving you a solid understanding and some examples that might help in an interview setting.</p>



<h3 class="wp-block-heading">Variadic Parameters</h3>



<p>Variadic parameters allow you to accept zero or more values of a specified type. You can use a variadic parameter to specify that the parameter can be passed a varying number of input values when the function is called. In Swift, a variadic parameter is written by placing three-period characters (<code>...</code>) after the parameter's type name.</p>



<h4 class="wp-block-heading">Example:</h4>



<pre>
func sumOfNumbers(_ numbers: Int...) -> Int {
    return numbers.reduce(0, +)
}

print(sumOfNumbers(1, 2, 3, 4, 5)) // 15
</pre>



<p>In this example, <code>numbers</code> is a variadic parameter that can accept any number of <code>Int</code> values. The function calculates the sum of all numbers provided.</p>



<h3 class="wp-block-heading">Generics</h3>



<p>Generics enable you to write flexible, reusable functions and types that can work with any type, subject to the requirements that you define. They are especially useful when you want to perform the same operation on different types.</p>



<h4 class="wp-block-heading">Example:</h4>



<pre>
func printItems<T>(_ items: [T]) {
    for item in items {
        print(item)
    }
}

printItems([1, 2, 3])
printItems(["apple", "banana", "cherry"])
</pre>



<p>In this example, <code>printItems</code> can accept an array of any type thanks to generics, and then iterates over the items in the array to print them. This isn't a true parameter pack in the sense of languages like C++, but it demonstrates how you can achieve similar functionality in Swift.</p>



<p>When preparing for interviews, understanding how to leverage Swift's language features like variadic parameters and generics can demonstrate your ability to think about problems flexibly and use the language effectively. Practice incorporating these concepts into your code to solve a variety of problems, as this will likely improve your code base or impress your interviewers as well.</p><p>The post <a href="/emulating-c-parameter-packs-with-variadic-parameters-and-generics-in-swift/">Emulating C++-like Parameter Packs in Swift</a> first appeared on <a href="/">Devashree Shukla</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/emulating-c-parameter-packs-with-variadic-parameters-and-generics-in-swift/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Blueprints of iOS Mastery: Engineering Superior App Architecture</title>
		<link>/architecting-ios-excellence-mastering-app-architecture-for-superior-apps/?utm_source=rss#038;utm_medium=rss&#038;utm_campaign=architecting-ios-excellence-mastering-app-architecture-for-superior-apps</link>
					<comments>/architecting-ios-excellence-mastering-app-architecture-for-superior-apps/#respond</comments>
		
		<dc:creator><![CDATA[devashreeks]]></dc:creator>
		<pubDate>Tue, 20 Dec 2022 16:56:00 +0000</pubDate>
				<category><![CDATA[Technical Writings]]></category>
		<category><![CDATA[App Architecture]]></category>
		<category><![CDATA[Best practices]]></category>
		<category><![CDATA[Code quality]]></category>
		<category><![CDATA[Code structing]]></category>
		<category><![CDATA[Comparing app architectures]]></category>
		<category><![CDATA[MVC]]></category>
		<category><![CDATA[MVP]]></category>
		<category><![CDATA[MVVM]]></category>
		<category><![CDATA[Scalability]]></category>
		<category><![CDATA[Separation of concerns]]></category>
		<category><![CDATA[Swift]]></category>
		<guid isPermaLink="false">/?p=294</guid>

					<description><![CDATA[<p>The architecture of a mobile application is akin to the blueprint of a building; it lays the foundational structure upon which everything else is built. For iOS applications, selecting the right architecture is crucial for scalability, maintainability, testability, and efficient performance. My this blog explores the predominant architectures that I learned and used in iOS...</p>
<p>The post <a href="/architecting-ios-excellence-mastering-app-architecture-for-superior-apps/">Blueprints of iOS Mastery: Engineering Superior App Architecture</a> first appeared on <a href="/">Devashree Shukla</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>The architecture of a mobile application is akin to the blueprint of a building; it lays the foundational structure upon which everything else is built. For iOS applications, selecting the right architecture is crucial for scalability, maintainability, testability, and efficient performance. My this blog explores the predominant architectures that I learned and used in iOS development till now, including MVC, MVP, MVVM, and VIPER, offering insights into their implementation, examples, and essential tips and strategies. Additionally, we&#8217;ll compare these architectures to help you make an informed decision for your next iOS project.</p>



<h2 class="wp-block-heading">Unveiling the Architectural Giants</h2>



<ol>
<li>Model-View-Controller (MVC)</li>



<li>Model-View-Presenter (MVP)</li>



<li>Model-View-ViewModel (MVVM)</li>



<li>View-Interactor-Presenter-Entity-Router (VIPER)</li>
</ol>



<p>Each architectural pattern offers unique benefits and challenges, tailored to different development needs and application complexities. Limiting the scope of the blog to 4 core architectural pattern only for simplicity and ease. Here&#8217;s an overview to start:</p>



<p></p>



<h3 class="wp-block-heading">1. MVC (Model-View-Controller)</h3>



<ul>
<li><strong>MVC</strong> splits an application into three main components, promoting a separation of concerns. 
<ul>
<li><strong>Model</strong>: Data + Business logic</li>



<li><strong>View</strong>: User Interface</li>



<li><strong>Controller</strong>: Logic that bridges Model and View</li>
</ul>
</li>
</ul>



<p><strong>Example:</strong></p>



<ul>
<li>A contact list app where the Model handles contact information, the View presents the user interface, and the Controller manages the communication between the contact list and the UI.</li>
</ul>



<p><strong>Pros:</strong></p>



<ul>
<li>Simplicity and widespread understanding.</li>



<li>Integrated support within iOS development tools.</li>
</ul>



<p><strong>Cons:</strong></p>



<ul>
<li>Controllers can become massive, leading to &#8220;Massive View Controller&#8221; syndrome.</li>
</ul>



<p><strong>Strategies for MVC:</strong></p>



<ul>
<li>Avoid &#8220;Massive View Controller&#8221; by delegating responsibilities and using service layers.</li>



<li>Utilize Apple&#8217;s guidelines and examples, as MVC is deeply integrated with iOS development.</li>
</ul>



<p></p>



<h3 class="wp-block-heading">2. MVP (Model-View-Presenter)</h3>



<ul>
<li><strong>MVP</strong> is a derivation of MVC where the Presenter takes on the responsibility of binding the UI to the data. 
<ul>
<li><strong>Model</strong>: Data</li>



<li><strong>View</strong>: Displays the UI, forwards user actions</li>



<li><strong>Presenter</strong>: Manages the View, updates UI with Model data</li>
</ul>
</li>
</ul>



<p><strong>Example:</strong></p>



<ul>
<li>An email app where the View displays emails, user actions like deleting an email are handled by the Presenter, which updates the View accordingly.</li>
</ul>



<p><strong>Pros:</strong></p>



<ul>
<li>Better separation of concerns than MVC.</li>



<li>Easier to unit test.</li>
</ul>



<p><strong>Cons:</strong></p>



<ul>
<li>The View and Presenter can become tightly coupled.</li>
</ul>



<ul>
<li>Keep the Presenter unaware of the iOS UI elements to ensure testability.</li>



<li>Use protocols to define the View&#8217;s requirements, making mock implementations easier for testing.</li>
</ul>



<p><strong>Strategies for MVP:</strong></p>



<ul>
<li>Keep the Presenter unaware of the iOS UI elements to ensure testability.</li>



<li>Use protocols to define the View&#8217;s requirements, making mock implementations easier for testing.</li>
</ul>



<h3 class="wp-block-heading">3. MVVM (Model-View-ViewModel)</h3>



<ul>
<li><strong>MVVM</strong> introduces a ViewModel, which acts as a transformer of Model information into values that can be displayed on a View. 
<ul>
<li><strong>Model</strong>: Data</li>



<li><strong>View</strong>: Interface (binds to ViewModel)</li>



<li><strong>ViewModel</strong>: Transforms Model information for the View</li>
</ul>
</li>
</ul>



<p><strong>Example:</strong></p>



<ul>
<li>A weather app where the ViewModel fetches weather data (Model) and formats it for display. The View updates automatically through data binding as weather data changes.</li>
</ul>



<p><strong>Pros:</strong></p>



<ul>
<li>Decouples business logic from UI code.</li>



<li>Simplifies unit testing.</li>
</ul>



<p><strong>Cons:</strong></p>



<ul>
<li>The learning curve for data binding.</li>



<li>Overhead from additional layers.</li>
</ul>



<p><strong>Strategies for MVVM:</strong></p>



<ul>
<li>Utilize data binding libraries to reduce boilerplate code and facilitate the View-ViewModel connection.</li>



<li>Focus on making ViewModels independent from View specifics to enhance testability.</li>
</ul>



<h3 class="wp-block-heading">4. VIPER (View, Interactor, Presenter, Entity, Router)</h3>



<ul>
<li><strong>VIPER</strong> is an architecture that aims to isolate responsibilities further, making it easier to manage complex applications. Each component has a clear role.
<ul>
<li><strong>View</strong>: User Interface</li>



<li><strong>Interactor</strong>: Business Logic</li>



<li><strong>Presenter</strong>: Prepares data for the View</li>



<li><strong>Entity</strong>: Data Models</li>



<li><strong>Router</strong>: Navigation logic</li>
</ul>
</li>
</ul>



<p><strong>Example:</strong></p>



<ul>
<li>A banking app where each feature (e.g., transfers, payments) is encapsulated into its own module, following the VIPER principles.</li>
</ul>



<p><strong>Pros:</strong></p>



<ul>
<li>High degree of testability and scalability.</li>



<li>Clear separation of concerns.</li>
</ul>



<p><strong>Cons:</strong></p>



<ul>
<li>Complexity and steep learning curve.</li>



<li>Overkill for simple applications.</li>
</ul>



<p><strong>Strategies for VIPER:</strong></p>



<ul>
<li>Use module generators to streamline the creation of VIPER components.</li>



<li>Clearly define the boundaries and responsibilities of each layer to maintain the architecture&#8217;s integrity.</li>
</ul>



<p></p>



<h3 class="wp-block-heading">Comparison and Strategies for Implementation</h3>



<p><strong>Choosing the Right Architecture:</strong></p>



<ul>
<li><strong>MVC</strong> ideal choice for simple to medium-complexity apps where built-in iOS patterns and components can be fully leveraged.</li>



<li><strong>MVP</strong> is best for applications where unit testing and a clean separation between UI code and business logic are priorities.</li>



<li><strong>MVVM</strong> is best for medium to large applications with complex data models and dynamic UIs that require frequent updates i.e. real-time updates</li>



<li><strong>VIPER</strong> is best for large-scale applications with complex business logic, requiring a clear separation of concerns and scalability with multiple developers.</li>
</ul>



<p><strong>Important Tips:</strong></p>



<ul>
<li>Understand the problem you&#8217;re solving and the scale of your application before choosing an architecture.</li>



<li>Consider the testability of your code. Architectures like MVP, MVVM, and VIPER facilitate easier testing.</li>



<li>Remember that architecture can evolve. Start simple and refactor as your app grows.</li>
</ul>



<p><strong>Implementing These Architectures:</strong></p>



<ul>
<li>Leverage iOS development tools like Xcode and Interface Builder, which offer built-in support for MVC.</li>



<li>Explore third-party libraries for data binding (for MVVM) or routing (for VIPER).</li>
</ul>



<p><strong>Conclusion:</strong> Selecting an app architecture is a critical decision that affects every phase of the development process. By understanding the strengths and weaknesses of each architecture, you can choose the most appropriate one for your iOS project, ensuring a solid foundation for your app&#8217;s success.</p>



<p></p>



<h3 class="wp-block-heading">Comparative Analysis for Informed Decision-Making</h3>



<figure class="wp-block-table"><table><thead><tr><th>Feature</th><th>MVC</th><th>MVP</th><th>MVVM</th><th>VIPER</th></tr></thead><tbody><tr><td>Complexity</td><td>Low</td><td>Medium</td><td>Medium</td><td>High</td></tr><tr><td>Testability</td><td>Moderate</td><td>High</td><td>High</td><td>Very High</td></tr><tr><td>Scalability</td><td>Moderate</td><td>High</td><td>High</td><td>Very High</td></tr><tr><td>Maintenance</td><td>Moderate</td><td>High</td><td>High</td><td>High</td></tr><tr><td>Ideal Use Case</td><td>Simple Apps</td><td>Medium Apps</td><td>Complex Apps</td><td>Large-scale Apps</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Architectural Wisdom: Tips for Success</h3>



<ul>
<li><strong>Understand Your Needs</strong>: Assess the complexity, scale, and specific requirements of your app before choosing an architecture.</li>



<li><strong>Embrace Evolution</strong>: Your app&#8217;s architecture can evolve. Start with simplicity and scale your architecture as your app grows.</li>



<li><strong>Prioritize Testability</strong>: Consider how easily you can test components of your app under each architecture.</li>



<li><strong>Stay Informed</strong>: Keep abreast of the latest iOS development trends and architectural patterns, as the landscape continually evolves.</li>
</ul>



<h3 class="wp-block-heading">Conclusion</h3>



<p>Selecting the right architectural pattern is a critical step influencing every aspect of your app&#8217;s development and future growth. Whether you opt for the <strong>straightforward MVC, the testable MVP, the dynamic MVVM, or the scalable VIPER</strong>, understanding and applying these patterns effectively will set your iOS app on the path to success. Through strategic implementation and a deep understanding of each architecture&#8217;s strengths and limitations, you can create robust, maintainable, and scalable iOS applications that stand the test of time.</p><p>The post <a href="/architecting-ios-excellence-mastering-app-architecture-for-superior-apps/">Blueprints of iOS Mastery: Engineering Superior App Architecture</a> first appeared on <a href="/">Devashree Shukla</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/architecting-ios-excellence-mastering-app-architecture-for-superior-apps/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
